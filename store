import { defineStore } from "pinia";
import { clientApi } from '@/apiClient';

export const userAuthStore = defineStore('auth', {
    state: () => ({
        // user używany do logowania  się i generacji JWT
        user: {},
        allUsers: {},
        userInfo: null,
        token: sessionStorage.getItem('authToken') || "brak tokenu",
        ldapResponseErr: '',
        dbResponseErr: '',
        ldapResponse: {},
        isAuthenticated: false,
    }),
    getters: {
        getLdapResponseErr(state) {
            return state.ldapResponseErr;
        },
        isLdapResponseErr(state) {
            return state.ldapResponseErr && state.ldapResponseErr.length;
        },
        getLdapResponse(state) {
            return state.ldapResponse;
        },
        isLdapResponse(state) {
            return state.ldapResponse && state.ldapResponse.length;
        },
        getDbRessponseErr(state) {
            return state.dbResponseErr;
        },
        isDbRessponseErr(state) {
            return state.dbResponseErr && state.dbResponseErr.length;
        },
        getUser(state) {
            return state.user;
        },
        isUser(state) {
            return state.user && state.user.length;
        },
        getUsers(state) {
            return state.allUsers;
        },
        areUsers(state) {
            return state.allUsers && state.allUsers.length;
        },
        getAuth(state) {
            return state.isAuthenticated;
        },

        getUserInfo(state) {
            return state.userInfo;
        },
        isUserInfo(state) {
            return state.userInfo && state.userInfo.length;
        },

    },
    actions: {

        async loadAllUser() {
            const responseData = await clientApi(`https://tms.energa.loc:8080/auth/allUser/`);

            const users = responseData.map(item => ({
                id: String(Date.now()) + Math.floor(Math.random() * 1000000),
                name: item[0],
                surname: item[1],
                userId: item[2],
                role: item[4],
                mail: item[3]
            }));
            this.allUsers = users
            console.log(users)


        },
        async deleteUser(payload) {
            try {
                console.log("Usuwanie użytkownika o ID:", payload.id);

                const response = await fetch(`https://tms.energa.loc:8080/auth/rmUser/${String(payload.id)}`, {
                    method: 'DELETE', // lub 'POST', w zależności od API
                    headers: {
                        'Content-Type': 'application/json',
                        // Dodaj inne nagłówki, np. autoryzację, jeśli są wymagane
                        // 'Authorization': `Bearer ${token}`,
                    },
                });

                if (!response.ok) {
                    throw new Error(`Błąd serwera: ${response.status} ${response.statusText}`);
                }

                // Sprawdź, czy odpowiedź zawiera JSON (niektóre serwery zwracają pustą odpowiedź przy DELETE)
                const contentType = response.headers.get('content-type');
                const data = contentType && contentType.includes('application/json')
                    ? await response.json()
                    : null;

                console.log("Odpowiedź serwera:", data);
                return data; // Zwróć dane, jeśli są potrzebne dalej
            } catch (error) {
                console.error("Błąd podczas usuwania użytkownika:", error);
                throw error; // Przekaż błąd dalej, jeśli chcesz obsłużyć go wyżej
            }
        },
        async createUser(payload) {
            try {
                const response = await fetch(`https://tms.energa.loc:8080/auth/createUser`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // 'Authorization': `Bearer ${token}`, // Jeśli potrzebne
                    },
                    body: JSON.stringify(payload)  // ✅ Konwersja obiektu na JSON
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(`Błąd serwera: ${response.status} ${response.statusText}. ${errorData.message || ''}`);
                }

                // Sprawdź, czy odpowiedź zawiera JSON
                const contentType = response.headers.get('content-type');
                const data = contentType && contentType.includes('application/json')
                    ? await response.json()
                    : { success: true, message: "Użytkownik utworzony pomyślnie" };

                console.log("Odpowiedź serwera:", data);
                return data;
            } catch (error) {
                console.error("Błąd podczas tworzenia użytkownika:", error);
                throw error;
            }
        },
        async veryfiInLdap(payload) {
            this.ldapResponseErr = "";
            try {
                const response = await fetch(`https://tms.energa.loc:8080/auth/login`,
                    {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: payload,
                    }
                );
                if (response.status !== 200) {
                    this.ldapResponseErr = "Błąd podczas logowania Ldap zweryfikuj login lub hasło";
                    throw new Error("Błąd podczas logowania Ldap zweryfikuj login lub hasło");
                }
                const data = await response.json();
                const nazwisko = data.filter(item => item.type === "sn").map(item => item.values[0]);
                const imie = data.filter(item => item.type === "givenName").map(item => item.values[0]);
                const mail = data.filter(item => item.type === "mail").map(item => item.values[0]);
                const id = data.filter(item => item.type === "name").map(item => item.values[0]);
                const kontoStatus = data.filter(item => item.type === "userAccountControl").map(item => item.values[0]);
                const user = {
                    id: id[0],
                    nazwisko: nazwisko[0],
                    imie: imie[0],
                    mail: mail[0],
                    kontoStatus: kontoStatus[0]
                }
                if (user.kontoStatus === "514") {
                    this.ldapResponseErr = "Twoje konto domenowe wygasło";
                    throw new Error("Twoje konto domenowe wygasło");
                }
                this.ldapResponse = user;
            } catch (err) {
                console.log(err)
            }
        },
        async loadUserFromDB(payload) {
            try {
                this.dbResponseErr = "";
                const Id = payload;
                const responseData = await clientApi(`https://tms.energa.loc:8080/auth/veryfy/${Id}`);
                if (responseData.length > 0) {
                    const user = responseData.map(item => ({
                        id: String(Date.now()) + Math.floor(Math.random() * 1000000),
                        name: item[0],
                        surname: item[1],
                        userId: item[2],
                        role: item[4],
                        mail: item[3]
                    }));
                    this.user = user[0];
                } else {
                    this.dbResponseErr = "Nie posiadasz konta do aplikacji TMS kliknij link poniżej";
                    console.log(this.dbResponseErr);
                }
            } catch (err) {
                console.log(err);
                this.dbResponseErr = "Wystąpił bład podczas ładowania użytkownika";
            }
        },
        async loginToApp(credentials) {
            try {
                const data = await clientApi(`https://tms.energa.loc:8080/auth/logToApp`, "POST", credentials)
                const token = data.token;
                sessionStorage.setItem('authToken', token)

            } catch (err) {
                console.log(err);
                this.dbResponseErr = "Wystąpił bład podczas generowania tokenu";
            }
        },
        async checkAuth() {

            const Token = sessionStorage.getItem('authToken');
            if (!Token) {
                console.error('brak tokenu');
                this.isAuthenticated = false;
                return false
            }
            try {
                const response = await fetch(`https://tms.energa.loc:8080/auth/authToken`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${Token}`
                    },
                });
                const data = await response.json()
                if (response.ok) {
                    this.isAuthenticated = data.isAuthenticated;
                    this.userInfo = {
                        id: String(Date.now()) + Math.floor(Math.random() * 1000000),
                        name: data.user.name,
                        role: data.user.role,
                        surname: data.user.surname,
                        userId: data.user.userId
                    }
                    return true;
                }
            } catch (error) {
                console.error('Błąd weryfikacji autoryzacji:', error);
                this.exitApp();
                return false;
            }
        },
        async refreshToken() {
            const oldToken = sessionStorage.getItem('authToken');
            if (!oldToken) {
                console.error('brak tokenu do odświerzenia');
                return;
            }
            try {
                const response = await fetch(`https://tms.energa.loc:8080/auth/refresh-token`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${oldToken}`
                    },
                });
                const data = await response.json();
                if (response.ok) {
                    const newToken = data.token;
                    sessionStorage.setItem('authToken', newToken)

                } else {
                    throw new Error('Nie udało się odświeżyć tokenu', data.message);
                }
            } catch (error) {
                console.error('Błąd odświeżania tokenu:', error);
                this.isAuthenticated = false;
                this.user = null;
            }
        },
        exitApp() {
            sessionStorage.removeItem("authToken");
            this.user = {},
                this.ldapResponseErr = '',
                this.dbResponseErr = '',
                this.ldapResponse = {},
                this.isAuthenticated = false
        },



    }

})
